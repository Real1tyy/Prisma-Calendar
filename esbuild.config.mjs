import fs from "node:fs";
import process from "node:process";
import builtins from "builtin-modules";
import esbuild from "esbuild";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	console.log("👀 Watching for changes... (errors will not stop the watcher)");

	// Function to build with error handling
	const buildWithErrorHandling = async () => {
		try {
			await context.rebuild();
			console.log("✅ Build successful");
		} catch (error) {
			console.log("❌ Build failed, but continuing to watch for changes...");
			console.log(error.message);
		}
	};

	// Initial build
	await buildWithErrorHandling();

	// Custom file watcher that continues on errors
	let isBuilding = false;
	const debounceTimeout = 100; // ms
	let timeoutId;

	const handleFileChange = () => {
		if (isBuilding) return;

		clearTimeout(timeoutId);
		timeoutId = setTimeout(async () => {
			isBuilding = true;
			await buildWithErrorHandling();
			isBuilding = false;
		}, debounceTimeout);
	};

	// Watch the src directory recursively
	fs.watch("./src", { recursive: true }, handleFileChange);

	// Keep the process alive
	process.on("SIGINT", () => {
		console.log("\n👋 Stopping watcher...");
		process.exit(0);
	});
}
